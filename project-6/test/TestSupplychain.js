// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originSlotTitleID = accounts[1]
    const originGameStudioID = "John Doe"
    const originGameStudioInformation = "Yarray Valley"
    const originGameStudioAddress = "-38.239770"
    const originGameStudioEmailContact = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    const casinoPrice = web3.toWei(.3, "ether")
    const slotManufacturerID = accounts[2]
    const regulatoryID = accounts[3]
    const casinoID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("game studio: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    const stateMapping = {
        "MathReady": 0,
        "ArtReady": 1,
        "AnimReady": 2,
        "AudioReady": 3,
        "PrelimTestingComplete": 4,
        "ForSale": 5,
        "Sold": 6,
        "QAComplete": 7,
        "ReleasedForReg": 8,
        "EnteredRegulatory": 9,
        "RegComplete": 10,
        "ReleasedForMarketing": 11,
        "MarketingComplete": 12,
        "ReadyForRelease": 13,
        "Purchased": 14,
        "Installed": 15
    }
    
    // 1st Test
    it("Testing smart contract function designMath() that allows a game studio to design math and start development of a new slot game", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event MathReady()
        var event = supplyChain.MathReady()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as MathReady by calling function designMath()
        await supplyChain.designMath(upc, originSlotTitleID, originGameStudioID, originGameStudioInformation, originGameStudioAddress, originGameStudioEmailContact, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[2], originSlotTitleID, 'Error: Missing or Invalid ownerID')

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originSlotTitleID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function designArt() that allows a game studio to design art", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ArtReady()
        var event = supplyChain.ArtReady()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ArtReady by calling function processtItem()
        await supplyChain.designArt(upc,{from: originSlotTitleID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originSlotTitleID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["ArtReady"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')          
    })    

    // 3rd Test
    it("Testing smart contract function designAnim() that allows a game studio to design animation", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event AnimReady()
        var event = supplyChain.AnimReady()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as AnimReady by calling function designAnim()
        await supplyChain.designAnim(upc,{from: originSlotTitleID})

        // // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originSlotTitleID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["AnimReady"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    

    // 4th Test
    it("Testing smart contract function designAudio() that allows a game studio to design audio", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event AudioReady()
        var event = supplyChain.AudioReady()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as AudioReady by calling function designAudio()
        await supplyChain.designAudio(upc,{from: originSlotTitleID})

        // // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originSlotTitleID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["AudioReady"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 

    // 5th Test
    it("Testing smart contract function conductPrelimTesting() that allows a game studio to conduct preliminary testing", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event PrelimTestingComplete()
        var event = supplyChain.PrelimTestingComplete()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as PrelimTestingComplete by calling function conductPrelimTesting()
        await supplyChain.conductPrelimTesting(upc,{from: originSlotTitleID})

        // // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originSlotTitleID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["PrelimTestingComplete"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 

    // 6th Test
    it("Testing smart contract function sellItem() that allows a game studio to sell its slot title", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc,productPrice,{from: originSlotTitleID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originSlotTitleID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["ForSale"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    

    // 7th Test
    it("Testing smart contract function buyItem() that allows a slot manufacturer to a slot title", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        var offerPrice = web3.toWei(1, "ether")
        await supplyChain.buyItem(upc,{from: slotManufacturerID, value: offerPrice})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], slotManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["Sold"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    

    // 8th Test
    it("Testing smart contract function conductQA() that allows a slot manufacturer to conduct quality assurance", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event QATested()
        var event = supplyChain.QATested()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as QATested by calling function conductQA()
        await supplyChain.conductQA(upc,{from: slotManufacturerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], slotManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["QAComplete"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })   

    // 9th Test
    it("Testing smart contract function releaseForReg() that allows a slot manufacturer to release a game to regulatory", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ReleasedForReg()
        var event = supplyChain.ReleasedForReg()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ReleasedForReg by calling function releaseForReg()
        await supplyChain.releaseForReg(upc,{from: slotManufacturerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], slotManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["ReleasedForReg"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 

    // 10th Test
    it("Testing smart contract function enterRegulatory() that allows a regulatory agency to accept a slot game to regulatory", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event EnteredReg()
        var event = supplyChain.EnteredReg()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as EnteredRegulatory by calling function enterRegulatory()
        await supplyChain.enterRegulatory(upc,{from: regulatoryID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], regulatoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["EnteredRegulatory"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })   

    // 11th Test
    it("Testing smart contract function exitRegulatory() that allows a regulatory agency to release a slot game from regulatory", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event RegComplete()
        var event = supplyChain.RegulatoryComplete()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as RegComplete by calling function exitRegulatory()
        await supplyChain.exitRegulatory(upc,{from: regulatoryID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], slotManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["RegComplete"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })  

    // 12th Test
    it("Testing smart contract function releaseForMarketing() that allows a slot manufacturer to release a slot game to marketing", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ReleasedForMarketing()
        var event = supplyChain.ReleasedForMarketing()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ReleasedForMarketing by calling function releaseForMarketing()
        await supplyChain.releaseForMarketing(upc,{from: slotManufacturerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], slotManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["ReleasedForMarketing"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })   

    // 13th Test
    it("Testing smart contract function exitMarketing() that allows a slot manufacturer to release a slot game from marketing", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event MarketingComplete()
        var event = supplyChain.MarketingComplete()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as MarketingComplete by calling function exitMarketing()
        await supplyChain.exitMarketing(upc,{from: slotManufacturerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], slotManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["MarketingComplete"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })   

    // 14th Test
    it("Testing smart contract function moveForRelease() that allows a slot manufacturer to mark slot game as ready to release", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ReadyForRelease()
        var event = supplyChain.ReadyForRelease()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ReadyForRelease by calling function moveForRelease()
        await supplyChain.moveForRelease(upc,casinoPrice,{from: slotManufacturerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], slotManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["ReadyForRelease"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 

    // 15th Test
    it("Testing smart contract function purchaseItem() that allows a casino to purchase slot title", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        var offerPrice = web3.toWei(.3, "ether")
        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.purchaseItem(upc,{from: casinoID, value: offerPrice})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], casinoID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["Purchased"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })   

    // 16th Test
    it("Testing smart contract function installGame() that allows a casino to mark slot game as installed", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Installed()
        var event = supplyChain.Installed()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Installed by calling function installGame()
        await supplyChain.installGame(upc,{from: casinoID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], casinoID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSlotTitleID, 'Error: Missing or Invalid originSlotTitleID')
        assert.equal(resultBufferOne[4], originGameStudioID, 'Error: Missing or Invalid originGameStudioID')
        assert.equal(resultBufferOne[5], originGameStudioInformation, 'Error: Missing or Invalid originGameStudioInformation')
        assert.equal(resultBufferOne[6], originGameStudioAddress, 'Error: Missing or Invalid originGameStudioAddress')
        assert.equal(resultBufferOne[7], originGameStudioEmailContact, 'Error: Missing or Invalid originGameStudioEmailContact')
        assert.equal(resultBufferTwo[5], stateMapping["Installed"], 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    }) 

    // 17th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[5], stateMapping["Installed"], 'Error: Invalid item State')
    })
});

